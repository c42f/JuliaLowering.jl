# Lowering pass 1: Macro expansion, simple normalizations and quote expansion

"""
A `ScopeLayer` is a mechanism for automatic hygienic macros; every identifier
is assigned to a particular layer and can only match against bindings which are
themselves part of that layer.

Normal code contains a single scope layer, whereas each macro expansion
generates a new layer.
"""
struct ScopeLayer
    id::LayerId
    mod::Module
    parent_layer::LayerId # Index of parent layer in a macro expansion. Equal to 0 for no parent
    is_macro_expansion::Bool # FIXME
end

struct MacroExpansionContext{GraphType} <: AbstractLoweringContext
    graph::GraphType
    bindings::Bindings
    scope_layers::Vector{ScopeLayer}
    scope_layer_stack::Vector{LayerId}
end

function MacroExpansionContext(graph::SyntaxGraph, mod::Module)
    layers = ScopeLayer[ScopeLayer(1, mod, 0, false)]
    MacroExpansionContext(graph, Bindings(), layers, LayerId[length(layers)])
end

current_layer(ctx::MacroExpansionContext) = ctx.scope_layers[last(ctx.scope_layer_stack)]
current_layer_id(ctx::MacroExpansionContext) = last(ctx.scope_layer_stack)

#--------------------------------------------------
# Expansion of quoted expressions
function collect_unquoted!(ctx, unquoted, ex, depth)
    if kind(ex) == K"$" && depth == 0
        # children(ex) is usually length 1, but for double interpolation it may
        # be longer and the children may contain K"..." expressions. Wrapping
        # in a tuple groups the arguments together correctly in those cases.
        push!(unquoted, @ast ctx ex [K"tuple" children(ex)...])
    else
        inner_depth = kind(ex) == K"quote" ? depth + 1 :
                      kind(ex) == K"$"     ? depth - 1 :
                      depth
        for e in children(ex)
            collect_unquoted!(ctx, unquoted, e, inner_depth)
        end
    end
    return unquoted
end

function expand_quote(ctx, ex)
    unquoted = SyntaxList(ctx)
    collect_unquoted!(ctx, unquoted, ex, 0)
    # Unlike user-defined macro expansion, we don't call append_sourceref for
    # the entire expression produced by `quote` expansion. We could, but it
    # seems unnecessary for `quote` because the surface syntax is a transparent
    # representation of the expansion process. However, it's useful to add the
    # extra srcref in a more targetted way for $ interpolations inside
    # interpolate_ast, so we do that there.
    #
    # In principle, particular user-defined macros could opt into a similar
    # mechanism.
    #
    # TODO: Should we try adding a srcref to the `quote` node only for the
    # extra syntax generated by expand_quote so srcref essentially becomes
    # (ex, @HERE) ?
    @ast ctx ex [K"call"
        interpolate_ast::K"Value"
        [K"inert" ex]
        unquoted...
    ]
end

#--------------------------------------------------
struct MacroContext <: AbstractLoweringContext
    graph::SyntaxGraph
    macrocall::Union{SyntaxTree,LineNumberNode,SourceRef}
    scope_layer::ScopeLayer
end

function adopt_scope(ex, ctx::MacroContext)
    adopt_scope(ex, ctx.scope_layer.id)
end

struct MacroExpansionError <: Exception
    context::Union{Nothing,MacroContext}
    ex::SyntaxTree
    msg::String
    "The source position relative to the node - may be `:begin` or `:end` or `:all`"
    position::Symbol
    "Error that occurred inside the macro function call (`nothing` if no inner exception)"
    err
    MacroExpansionError(
        context::Union{Nothing,MacroContext}, ex::SyntaxTree, msg::AbstractString, position::Symbol,
        @nospecialize err = nothing
    ) = new(context, ex, msg, position, err)
end

function MacroExpansionError(ex::SyntaxTree, msg::AbstractString; position=:all)
    MacroExpansionError(nothing, ex, msg, position)
end

function Base.showerror(io::IO, exc::MacroExpansionError)
    print(io, "MacroExpansionError")
    ctx = exc.context
    if !isnothing(ctx)
        print(io, " while expanding ", ctx.macrocall[1],
              " in module ", ctx.scope_layer.mod)
    end
    print(io, ":\n")
    # TODO: Display niceties:
    # * Show the full provenance tree somehow, in addition to the primary
    #   source location we're showing here?
    # * What if the expression doesn't arise from a source file?
    # * How to deal with highlighting trivia? Could provide a token kind or
    #   child position within the raw tree? How to abstract this??
    src = sourceref(exc.ex)
    fb = first_byte(src)
    lb = last_byte(src)
    pos = exc.position
    byterange = pos == :all     ? (fb:lb)   :
                pos == :begin   ? (fb:fb-1) :
                pos == :end     ? (lb+1:lb) :
                error("Unknown position $pos")
    highlight(io, src.file, byterange, note=exc.msg)
    if !isnothing(exc.err)
        print(io, "\nCaused by:\n")
        showerror(io, exc.err)
    end
end

function eval_macro_name(ctx::MacroExpansionContext, mctx::MacroContext, ex::SyntaxTree)
    # `ex1` might contain a nontrivial mix of scope layers so we can't just
    # `eval()` it, as it's already been partially lowered by this point.
    # Instead, we repeat the latter parts of `lower()` here.
    ex1 = expand_forms_1(ctx, ex)
    ctx2, ex2 = expand_forms_2(ctx, ex1)
    ctx3, ex3 = resolve_scopes(ctx2, ex2)
    ctx4, ex4 = convert_closures(ctx3, ex3)
    ctx5, ex5 = linearize_ir(ctx4, ex4)
    mod = current_layer(ctx).mod
    expr_form = to_lowered_expr(mod, ex5)
    try
        eval(mod, expr_form)
    catch err
        throw(MacroExpansionError(mctx, ex, "Macro not found", :all, err))
    end
end

# Record scope layer information for symbols passed to a macro by setting
# scope_layer for each expression and also processing any K"escape" arising
# from previous expansion of old-style macros.
#
# See also set_scope_layer()
function set_macro_arg_hygiene(ctx, ex, layer_ids, layer_idx)
    k = kind(ex)
    scope_layer = get(ex, :scope_layer, layer_ids[layer_idx])
    if k == K"module" || k == K"toplevel" || k == K"inert"
        makenode(ctx, ex, ex, children(ex);
                 scope_layer=scope_layer)
    elseif k == K"."
        makenode(ctx, ex, ex, set_macro_arg_hygiene(ctx, ex[1], layer_ids, layer_idx), ex[2],
                 scope_layer=scope_layer)
    elseif !is_leaf(ex)
        inner_layer_idx = layer_idx
        if k == K"escape"
            inner_layer_idx = layer_idx - 1
            if inner_layer_idx < 1
                # If we encounter too many escape nodes, there's probably been
                # an error in the previous macro expansion.
                # todo: The error here isn't precise about that - maybe we
                # should record that macro call expression with the scope layer
                # if we want to report the error against the macro call?
                throw(MacroExpansionError(ex, "`escape` node in outer context"))
            end
        end
        mapchildren(e->set_macro_arg_hygiene(ctx, e, layer_ids, inner_layer_idx),
                    ctx, ex; scope_layer=scope_layer)
    else
        makeleaf(ctx, ex, ex; scope_layer=scope_layer)
    end
end

function prepare_macro_args(ctx, mctx, raw_args)
    macro_args = Any[mctx]
    for arg in raw_args
        # Add hygiene information to be carried along with macro arguments.
        #
        # Macro call arguments may be either
        # * Unprocessed by the macro expansion pass
        # * Previously processed, but spliced into a further macro call emitted by
        #   a macro expansion.
        # In either case, we need to set scope layers before passing the
        # arguments to the macro call.
        push!(macro_args, set_macro_arg_hygiene(ctx, arg, ctx.scope_layer_stack,
                                                length(ctx.scope_layer_stack)))
    end
    return macro_args
end

function expand_macro(ctx, ex)
    @assert kind(ex) == K"macrocall"

    macname = ex[1]
    mctx = MacroContext(ctx.graph, ex, current_layer(ctx))
    macfunc = eval_macro_name(ctx, mctx, macname)
    raw_args = ex[2:end]
    # We use a specific well defined world age for the next checks and macro
    # expansion invocations. This avoids inconsistencies if the latest world
    # age changes concurrently.
    # 
    # TODO: Allow this to be passed in
    macro_world = Base.get_world_counter()
    if hasmethod(macfunc, Tuple{typeof(mctx), typeof.(raw_args)...}; world=macro_world)
        macro_args = prepare_macro_args(ctx, mctx, raw_args)
        expanded = try
            Base.invoke_in_world(macro_world, macfunc, macro_args...)
        catch exc
            newexc = exc isa MacroExpansionError ?
                MacroExpansionError(mctx, exc.ex, exc.msg, exc.position, exc.err) :
                MacroExpansionError(mctx, ex, "Error expanding macro", :all, exc)
            # TODO: We can delete this rethrow when we move to AST-based error propagation.
            rethrow(newexc)
        end
        if expanded isa SyntaxTree
            if !is_compatible_graph(ctx, expanded)
                # If the macro has produced syntax outside the macro context,
                # copy it over. TODO: Do we expect this always to happen?  What
                # is the API for access to the macro expansion context?
                expanded = copy_ast(ctx, expanded)
            end
        else
            expanded = @ast ctx ex expanded::K"Value"
        end
    else
        # Compat: attempt to invoke an old-style macro if there's no applicable
        # method for new-style macro arguments.
        macro_loc = source_location(LineNumberNode, ex)
        macro_args = Any[macro_loc, current_layer(ctx).mod]
        for arg in raw_args
            # For hygiene in old-style macros, we omit any additional scope
            # layer information from macro arguments. Old-style macros will
            # handle that using manual escaping in the macro itself.
            #
            # Note that there's one slight incompatibility here for identifiers
            # interpolated into the `raw_args` from outer macro expansions of
            # new-style macros which call old-style macros. Instead of seeing
            # `Expr(:escape)` in such situations, old-style macros will now see
            # `Expr(:scope_layer)` inside `macro_args`.
            push!(macro_args, Expr(arg))
        end
        expanded = try
            Base.invoke_in_world(macro_world, macfunc, macro_args...)
        catch exc
            if exc isa MethodError && exc.f === macfunc
                if !isempty(methods_in_world(macfunc, Tuple{typeof(mctx), Vararg{Any}}, macro_world))
                    # If the macro has at least some methods implemented in the
                    # new style, assume the user meant to call one of those
                    # rather than any old-style macro methods which might exist
                    exc = MethodError(macfunc, (prepare_macro_args(ctx, mctx, raw_args)..., ), macro_world)
                end
            end
            rethrow(MacroExpansionError(mctx, ex, "Error expanding macro", :all, exc))
        end
        expanded = expr_to_syntaxtree(ctx, expanded, macro_loc)
    end

    if kind(expanded) != K"Value"
        expanded = append_sourceref(ctx, expanded, ex)
        # Module scope for the returned AST is the module where this particular
        # method was defined (may be different from `parentmodule(macfunc)`)
        mod_for_ast = lookup_method_instance(macfunc, macro_args,
                                             macro_world).def.module
        new_layer = ScopeLayer(length(ctx.scope_layers)+1, mod_for_ast,
                               current_layer_id(ctx), true)
        push!(ctx.scope_layers, new_layer)
        push!(ctx.scope_layer_stack, new_layer.id)
        expanded = expand_forms_1(ctx, expanded)
        pop!(ctx.scope_layer_stack)
    end
    return expanded
end

# Add a secondary source of provenance to each expression in the tree `ex`.
function append_sourceref(ctx, ex, secondary_prov)
    srcref = (ex, secondary_prov)
    if !is_leaf(ex)
        if kind(ex) == K"macrocall"
            makenode(ctx, srcref, ex, children(ex)...)
        else
            makenode(ctx, srcref, ex,
                     map(e->append_sourceref(ctx, e, secondary_prov), children(ex))...)
        end
    else
        makeleaf(ctx, srcref, ex)
    end
end

"""
Lowering pass 1

This pass contains some simple expansion to make the rest of desugaring easier
to write and expands user defined macros. Macros see the surface syntax, so
need to be dealt with before other lowering.

* Does identifier normalization
* Strips semantically irrelevant "container" nodes like parentheses
* Expands macros
* Processes quoted syntax turning `K"quote"` into `K"inert"` (eg, expanding
  interpolations)
"""
function expand_forms_1(ctx::MacroExpansionContext, ex::SyntaxTree)
    k = kind(ex)
    if k == K"Identifier"
        name_str = ex.name_val
        if all(==('_'), name_str)
            @ast ctx ex ex=>K"Placeholder"
        elseif is_ccall_or_cglobal(name_str)
            # Lower special identifiers `cglobal` and `ccall` to `K"core"`
            # psuedo-refs very early so that cglobal and ccall can never be
            # turned into normal bindings (eg, assigned to)
            @ast ctx ex name_str::K"core"
        else
            layerid = get(ex, :scope_layer, current_layer_id(ctx))
            makeleaf(ctx, ex, ex, kind=K"Identifier", scope_layer=layerid)
        end
    elseif k == K"Identifier" || k == K"MacroName" || k == K"StringMacroName"
        layerid = get(ex, :scope_layer, current_layer_id(ctx))
        makeleaf(ctx, ex, ex, kind=K"Identifier", scope_layer=layerid)
    elseif k == K"var" || k == K"char" || k == K"parens"
        # Strip "container" nodes
        @chk numchildren(ex) == 1
        expand_forms_1(ctx, ex[1])
    elseif k == K"escape"
        # For processing of old-style macros
        @chk numchildren(ex) >= 1 "`escape` requires an argument"
        if length(ctx.scope_layer_stack) === 1
            throw(MacroExpansionError(ex, "`escape` node in outer context"))
        end
        top_layer = pop!(ctx.scope_layer_stack)
        escaped_ex = expand_forms_1(ctx, ex[1])
        push!(ctx.scope_layer_stack, top_layer)
        escaped_ex
    elseif k == K"hygienic_scope"
        @chk numchildren(ex) >= 2 && ex[2].value isa Module (ex,"`hygienic_scope` requires an AST and a module")
        new_layer = ScopeLayer(length(ctx.scope_layers)+1, ex[2].value,
                               current_layer_id(ctx), true)
        push!(ctx.scope_layers, new_layer)
        push!(ctx.scope_layer_stack, new_layer.id)
        hyg_ex = expand_forms_1(ctx, ex[1])
        pop!(ctx.scope_layer_stack)
        hyg_ex
    elseif k == K"juxtapose"
        layerid = get(ex, :scope_layer, current_layer_id(ctx))
        @chk numchildren(ex) == 2
        @ast ctx ex [K"call"
            "*"::K"Identifier"(scope_layer=layerid)
            expand_forms_1(ctx, ex[1])
            expand_forms_1(ctx, ex[2])
        ]
    elseif k == K"quote"
        @chk numchildren(ex) == 1
        # TODO: Upstream should set a general flag for detecting parenthesized
        # expressions so we don't need to dig into `green_tree` here. Ugh!
        plain_symbol = has_flags(ex, JuliaSyntax.COLON_QUOTE) &&
                       kind(ex[1]) == K"Identifier" &&
                       (sr = sourceref(ex); sr isa SourceRef && kind(sr.green_tree[2]) != K"parens")
        if plain_symbol
            # As a compromise for compatibility, we treat non-parenthesized
            # colon quoted identifiers like `:x` as plain Symbol literals
            # because these are ubiquitiously used in Julia programs as ad hoc
            # enum-like entities rather than pieces of AST.
            @ast ctx ex[1] ex[1]=>K"Symbol"
        else
            expand_forms_1(ctx, expand_quote(ctx, ex[1]))
        end
    elseif k == K"macrocall"
        expand_macro(ctx, ex)
    elseif k == K"module" || k == K"toplevel" || k == K"inert"
        ex
    elseif k == K"." && numchildren(ex) == 2
        e2 = expand_forms_1(ctx, ex[2])
        if kind(e2) == K"Identifier" || kind(e2) == K"Placeholder"
            # FIXME: Do the K"Symbol" transformation in the parser??
            e2 = @ast ctx e2 e2=>K"Symbol"
        end
        @ast ctx ex [K"." expand_forms_1(ctx, ex[1]) e2]
    elseif (k == K"call" || k == K"dotcall")
        # Do some initial desugaring of call and dotcall here to simplify
        # the later desugaring pass
        args = SyntaxList(ctx)
        if is_infix_op_call(ex) || is_postfix_op_call(ex)
            @chk numchildren(ex) >= 2 "Postfix/infix operators must have at least two positional arguments"
            farg = ex[2]
            push!(args, ex[1])
            append!(args, ex[3:end])
        else
            @chk numchildren(ex) > 0 "Call expressions must have a function name"
            farg = ex[1]
            append!(args, ex[2:end])
        end
        if !isempty(args)
            if kind(args[end]) == K"do"
                # move do block into first argument location
                pushfirst!(args, pop!(args))
            end
        end
        if length(args) == 2 && is_same_identifier_like(farg, "^") && kind(args[2]) == K"Integer"
            # Do literal-pow expansion here as it's later used in both call and
            # dotcall expansion.
            @ast ctx ex [k
                "literal_pow"::K"top"
                expand_forms_1(ctx, farg)
                expand_forms_1(ctx, args[1])
                [K"call"
                    [K"call"
                        "apply_type"::K"core"
                        "Val"::K"top"
                        args[2]
                    ]
                ]
            ]
        else
            if kind(farg) == K"." && numchildren(farg) == 1
                # (.+)(x,y) is treated as a dotcall
                k = K"dotcall"
                farg = farg[1]
            end
            # Preserve call type flags (mostly ignored in the next pass as
            # we've already reordered arguments.)
            callflags = JuliaSyntax.call_type_flags(ex)
            @ast ctx ex [k(syntax_flags=(callflags == 0 ? nothing : callflags))
                expand_forms_1(ctx, farg)
                (expand_forms_1(ctx, a) for a in args)...
            ]
        end
    elseif is_leaf(ex)
        ex
    elseif k == K"<:" || k == K">:" || k == K"-->"
        # TODO: Should every form get layerid systematically? Or only the ones
        # which expand_forms_2 needs?
        layerid = get(ex, :scope_layer, current_layer_id(ctx))
        mapchildren(e->expand_forms_1(ctx,e), ctx, ex; scope_layer=layerid)
    else
        mapchildren(e->expand_forms_1(ctx,e), ctx, ex)
    end
end

function expand_forms_1(mod::Module, ex::SyntaxTree)
    graph = ensure_attributes(syntax_graph(ex),
                              var_id=IdTag,
                              scope_layer=LayerId,
                              __macro_ctx__=Nothing,
                              meta=CompileHints)
    ctx = MacroExpansionContext(graph, mod)
    ex2 = expand_forms_1(ctx, reparent(ctx, ex))
    graph2 = delete_attributes(graph, :__macro_ctx__)
    # TODO: Returning the context with pass-specific mutable data is a bad way
    # to carry state into the next pass. We might fix this by attaching such
    # data to the graph itself as global attributes?
    ctx2 = MacroExpansionContext(graph2, ctx.bindings, ctx.scope_layers, LayerId[])
    return ctx2, reparent(ctx2, ex2)
end
